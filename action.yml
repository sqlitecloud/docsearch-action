name: "SQLite Cloud - docs search"
description: "Parses .md and .mdx files to create a database on your SQLite Cloud project."
author: "Gioele Cantoni"

inputs:
  project-string:
    description: The SQLite Cloud project connection string.
    required: true
  database:
    description: The name of the database to deploy on SQLite Cloud, by default it's documentation.sqlite.
    required: true
  path:
    description: The path of the markdown files, by default it will parse every .md/.mdx file recursively starting from the working directory.
    required: false
    default: $(pwd)
  remove-astro-headers:
    description: If you use Astro and you want to remove its docs header make this true.
    required: false
    default: false
  remove-titles:
    description: If you want to avoid redundancy of your titles in the search set this to true.
    required: false
    default: false

branding:
  icon: "search"
  color: "white"

runs:
  using: "composite"
  steps:
  
    - uses: actions/checkout@v4

    - name: Builds the docBuilder
      run: make main
      shell: bash

    - name: Runs the docBuilder
      run: ./main ${{ inputs.path }} search.sql ${{ inputs.remove-astro-headers }} ${{ inputs.remove-titles }}
      shell: bash

    - name: Executes the SQL query
      run: |
        if [[ "${{ inputs.project-string }}" =~ ^sqlitecloud:// ]]; then
          [[ "${{ inputs.database }}" ]] || { echo "database input is empty" ; exit 1; }
          SQL=$(echo -e $(cat search.sql))
          BODY="{ \"sql\": \"${SQL}\", \"database\": \"${{ inputs.database }}\"}"
          URL="https:"$(echo ${{ inputs.project-string }} | awk -F ':' '{print $2}')":8090/v2/weblite/sql"
          echo $(curl $URL -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ inputs.project-string }}' -H 'accept: application/json' -d "$BODY")
        else
          echo "${{ inputs.project-string }} incorrect project string"
          exit 1
        fi
      shell: bash
