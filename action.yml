name: "SQLite Cloud - docs search"
description: "Parses .md and .mdx files to create a database on your SQLite Cloud project."
author: "Gioele Cantoni"

inputs:
  project-string:
    description: The SQLite Cloud project connection string.
    required: true
  base-url:
    description: Your website's documentation base url.
    required: true
  database:
    description: The name of the database to use on SQLite Cloud, just remeber to create first a database on your project!
    required: true
  path:
    description: The path of the markdown files, by default it will parse every .md/.mdx file recursively starting from the working directory.
    required: false
    default: $(pwd)
  strip-html:
    description: If you want to remove html elements from the search set this to true.
    required: false
    default: false
  strip-jsx:
    description: If you want to remove jsx elements from the search set this to true.
    required: false
    default: false
  strip-md-titles:
    description: If you want to avoid redundancy of your markdown titles in the search set this to true.
    required: false
    default: false
  strip-astro-header:
    description: If you use Astro and you want to remove its docs header make this true.
    required: false
    default: false
  path-using-slug:
    description: Use the slug in the header as the path instead of the relative one.
    required: false
    default: false

branding:
  icon: "search"
  color: "blue"

runs:
  using: "composite"
  steps:

    - name: Set GitHub Path
      run: echo "${{ github.action_path }}/src" >> $GITHUB_PATH
      shell: bash

    - name: Makes .sql builder
      run: |
        cd ${{ github.action_path }}/src
        gcc -c cargs.c -o cargs.o && gcc main.c cargs.o -o main
        cd ${{ github.workspace }}
      shell: bash

    - name: Runs .sql builder
      run: |
        args=" --use-transactions --json"
        [[ ${{ inputs.strip-html }} == true ]] && args+=" --strip-html"
        [[ ${{ inputs.strip-jsx }} == true ]] && args+=" --strip-jsx"
        [[ ${{ inputs.strip-md-titles }} == true ]] && args+=" --strip-md-titles"
        [[ ${{ inputs.strip-astro-header }} == true ]] && args+=" --strip-astro-header"
        [[ ${{ inputs.path-using-slug }} == true ]] && args+=" --path-using-slug"
        echo $(main --input=${{ inputs.path }} --output=search.sql --base-url=${{ inputs.base-url }} $args)
      shell: bash

    - name: Executes the .sql on SQLite Cloud
      run: |
        if [[ "${{ inputs.project-string }}" =~ ^sqlitecloud:// ]]; then
          [[ "${{ inputs.database }}" ]] || { echo "database input is empty" ; exit 1; }
          echo "{ \"sql\": \"" > up.json
          cat search.sql >> up.json
          echo "\", \"database\": \"${{ inputs.database }}\"}" >> up.json
          URL="https:"$(echo ${{ inputs.project-string }} | awk -F ':' '{print $2}')":8090/v2/weblite/sql"
          RES=$(curl --compressed $URL -H 'Content-Type: application/json' -H 'Authorization: Bearer ${{ inputs.project-string }}' -H 'accept: application/json' -d @up.json)
          echo $RES
          if [[ "$RES" =~ error ]]; then
            echo "Error on SQLite Cloud .sql execution"
            exit 1
          fi
        else
          echo "${{ inputs.project-string }} incorrect project string"
          exit 1
        fi
      shell: bash
